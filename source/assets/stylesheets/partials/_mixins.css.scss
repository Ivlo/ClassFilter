// ==========
// = mixins =
// ==========

@mixin clearfix{
    &:before,
    &:after {
      content: ".";
      display: block;
      height: 0;
      overflow: hidden;
    }
    &:after {clear: both;}
    & {zoom: 1; }
}


@mixin after($content : "") {
  & {
    *zoom: expression(
      this.runtimeStyle.zoom="1",
      (ea = this['appendChild']( document.createElement("small"), null )),
      ea.innerHTML="#{$content}",
      ea.className="after pseudo-element"
    );
  }

  &:after {
    content : $content;
  }

  &:after, & > .after{
    @content;
  }
}

@mixin before($content : "") {
  & {
    *zoom: expression(
      this.runtimeStyle.zoom="1",
      (eb = this[ 'insertBefore']( document.createElement("small"), this.firstChild ) ),
      eb.innerHTML="#{$content}",
      eb.className="before pseudo-element"
    );
  }

  &:before {
    content : $content;
  }

  &:before, & > .before{
    @content;
  }
}


@mixin after_and_before($after_content : "", $before_content : "") {
  & {
    *zoom: expression(
      this.runtimeStyle.zoom="1",
      (eb = this[ 'insertBefore' ]( document.createElement("small"),  this.firstChild )),
      (ea = this[ 'appendChild' ]( document.createElement("small"), null )),
      eb.innerHTML="#{$before_content}",
      eb.className="after pseudo-element",
      ea.innerHTML="#{$after_content}",
      ea.className="before pseudo-element"
    );
  }

  &:after {
    content : $after_content;
  }
  &:before {
    content : $before_content;
  }

}

@mixin inline-block() {
  display:-moz-inline-stack;
  display:inline-block;
  *display:inline;
  zoom:1;
}

@mixin font-family($font_name, $font_file, $mixin){
  @font-face {
    font-family: "#{$font_name}";
    src: font_url("#{$font_file}.eot");
    src: font_url("#{$font_file}.eot?#iefix") format("embedded-opentype"),
         font_url("#{$font_file}.woff") format("woff"),
         font_url("#{$font_file}.ttf") format("truetype"),
         font_url("#{$font_file}.svg#{$mixin}") format("svg");
    font-weight: normal;
    font-style: normal;
  }

  // El mixin crea automagicamente un placeholder
  // para extender segun el nombre que se haya pasado .
  //   ej. @include font-family("KreonLight", "kreon-light-webfont", "kreon-light")
  //       %font-kreon-light{
  //          font-family: "#{$font_name}";
  //          font-weight: normal!important;
  //          font-style: normal!important;
  //        }
  %font-#{$mixin}{
    font-family: "#{$font_name}";
    font-weight: normal!important;
    font-style: normal!important;
  }
}

@mixin svg($name, $file_name, $w:null, $h:null, $png:false){
  @if $device == "d"{
    @if $png{
      %ico_#{$name}_no_svg{
        background-image: image_url("icons/png/#{$file_name}.png");
      }
    }
    %ico_#{$name}{
      background-image: image_url("icons/svg/#{$file_name}.svg");
      .no-svg &{ @extend %ico_#{$name}_no_svg !optional; }
    }
    @if $svg_render_classes{
      .ico_#{$name} {
        @extend %inline-block;
        @extend %ico_#{$name};
        background-repeat:no-repeat;
        @if $w{ width:$w; }
        @if $h{ height:$h; }
      }
    }
  }@else{
    @if $png{
      %#{$device}_ico_#{$name}_no_svg{
        background-image: image_url("icons/png/#{$file_name}.png");
      }
    }
    %#{$device}_ico_#{$name}{
      background-image: image_url("icons/svg/#{$file_name}.svg");
      .no-svg &{ @extend %#{$device}_ico_#{$name}_no_svg !optional }
    }
  }
}

@mixin prefixer ($property, $value:null,
                 $webkit: true,
                    $moz: true,
                     $ms: true,
                      $o: true,
                   $spec: true) {
  @if $value{
    @if $webkit { -webkit-#{$property}: $value; }
    @if $moz    {    -moz-#{$property}: $value; }
    @if $ms     {     -ms-#{$property}: $value; }
    @if $o      {      -o-#{$property}: $value; }
    @if $spec   {         #{$property}: $value; }
  }
}

// Responsive Helpers

@mixin desktop(){
  @if $device == "d"{
    @content;
  }
}

@mixin mobile_device(){
  @if $device == "md"{
    @content;
  }
}

@mixin mobile(){
  @if $device == "m"{
    @content;
  }
}

@mixin tablet(){
  @if $device == "t"{
    @content;
  }
}

//  =========
//  = Grids =
//  =========

// Tamaño de las columnas

@function col-width($cols: $number_of_columns) {
  @return ($cols * $column + ($cols - 1) * $gutter_width) / $container_width * 100%;
}

@mixin col($cols: $number_of_columns){
  width: col-width($cols);
  *width: (col-width($cols)) - 0.001%; //evita que se caigan columnas con anidaciones en IE7
}

// Definicion de layout
@mixin namespaced($name){
  @if $device != "d"{
    %#{$device}-#{$name} {
      @content;
    }
  }@else{
    %#{$name}{
      @content;
    }
  }
}

@mixin layout($name){
  @include namespaced("layout-#{$name}"){
    @content;
  }
}

// Definicion de layout con columnas del mismo tamaño
@mixin eq_layout($cols, $name:false){
  @if $name == false{
    $name: $cols;
  }
  @include layout($name){
    > .col{
      @include col($cols);
    }
  }
}
